#pragma config(Sensor, S1,     light,          sensorLightActive)
#pragma config(Sensor, S2,     ultra,          sensorSONAR)
#pragma config(Motor,  motorA,          left,          tmotorNXT, PIDControl, reversed, encoder)
#pragma config(Motor,  motorB,          right,         tmotorNXT, PIDControl, reversed, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

void clren(){
	nMotorEncoder[left]=0;
	nMotorEncoder[right]=0;
}
void fwd(){
	motor[left]=50;
	motor[right]=50;
}
void stoprobot(){
	motor[left]=0;
	motor[right]=0;
}

void back()
{
	motor[left]=-50;
	motor[right]=-50;
}
task main()
{
float t=57,linecount=0,d1,d2;
clren();
while(SensorValue(light)>t)
{
	fwd();
}
stoprobot();
linecount = linecount+1;
d1= nMotorEncoder[left];
while(nMotorEncoder[left]>0 && nMotorEncoder[right]>0)
{
	motor[left]=-50;
	motor[right]=-50;
}
stoprobot();
while(nMotorEncoder[left]<d1+100 && nMotorEncoder[right]<d1+100)
{
	fwd();
}
while(SensorValue(light)>t)
{
	fwd();
}
stoprobot();
linecount = linecount+1;
d2= nMotorEncoder[left]+d1;
while(nMotorEncoder[left]>0 && nMotorEncoder[right]>0)
{
	motor[left]=-50;
	motor[right]=-50;
}
while(nMotorEncoder[left]<d2+100 && nMotorEncoder[right]<d2+100)
{
	fwd();
}
stoprobot();
d3= nMotorEncoder[left]+d1;
while(nMotorEncoder[left]>0 && nMotorEncoder[right]>0)
{
	motor[left]=-50;
	motor[right]=-50;
}
stoprobot();
}